---
- name: Configure Kubernetes Cluster
  hosts: k8s_cluster
  become: yes

  tasks:
    - name: Install Kubernetes dependencies and add repository
      block:
        - name: Install required packages
          apt:
            name: "{{ item }}"
            state: present
          loop:
            - curl
            - apt-transport-https
          become: yes

        - name: Download and install Google Cloud apt key
          shell: |
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/k8s.gpg
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          become: yes

        - name: Add Kubernetes repository
          shell: |
            echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          become: yes

    - name: Install Kubernetes components
      block:
        - name: Update APT package cache
          apt:
            update_cache: yes

        - name: Install required packages
          apt:
            name: "{{ item }}"
            state: present
          loop:
            - wget
            - curl
            - vim
            - git
            - kubelet
            - kubeadm
            - kubectl

        - name: Mark Kubernetes packages on hold
          shell: sudo apt-mark hold {{ item }}
          loop:
            - kubelet
            - kubeadm
            - kubectl

    - name: Configure System
      block:
        - name: Disable Swap
          command: swapoff -a
          ignore_errors: true

        - name: Debug Current /etc/fstab Content
          command: cat /etc/fstab
          register: current_fstab_content

        - debug:
            var: current_fstab_content.stdout_lines

        - name: Comment Swap Line in /etc/fstab
          replace:
            path: /etc/fstab
            regexp: '^/dev/mapper/.*swap.*'
            replace: '#\g<0>'
          notify: Reload System

        - name: Comment out /swap.img line in /etc/fstab
          replace:
            path: /etc/fstab
            regexp: '^/swap.img.*'
            replace: '#\g<0>'

        - name: Debug Updated /etc/fstab Content
          command: cat /etc/fstab
          register: updated_fstab_content

        - debug:
            var: updated_fstab_content.stdout_lines

        - name: Load Kernel Modules
          command: modprobe {{ item }}
          loop:
            - overlay
            - br_netfilter

        - name: Create kubernetes.conf File
          file:
            path: /etc/sysctl.d/kubernetes.conf
            state: touch

        - name: Update kubernetes.conf
          blockinfile:
            path: /etc/sysctl.d/kubernetes.conf
            block: |
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1
              net.ipv4.ip_forward = 1
          notify: Reload System

        - name: Apply sysctl Settings
          command: sysctl -p /etc/sysctl.d/kubernetes.conf

    - name: Configure Kubernetes prerequisites
      block:
        - name: Create k8s.conf file
          file:
            path: /etc/modules-load.d/k8s.conf
            state: touch

        - name: Update k8s.conf
          lineinfile:
            path: /etc/modules-load.d/k8s.conf
            line: "{{ item }}"
          with_items:
            - overlay
            - br_netfilter

        - name: Load overlay and br_netfilter modules
          command: modprobe {{ item }}
          with_items:
            - overlay
            - br_netfilter

        - name: Set sysctl values
          sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
          loop:
            - {name: "net.bridge.bridge-nf-call-iptables", value: "1"}
            - {name: "net.ipv4.ip_forward", value: "1"}
            - {name: "net.bridge.bridge-nf-call-ip6tables", value: "1"}

        - name: Install required packages
          apt:
            name: "{{ item }}"
            state: present
          with_items:
            - curl
            - gnupg2
            - software-properties-common
            - apt-transport-https
            - ca-certificates

        - name: Add Docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
            state: present

        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Install containerd.io
          apt:
            name: containerd.io
            state: present

        - name: Create configure_containerd.sh script
          copy:
            content: |
              #!/bin/bash
              # Add your containerd configuration here
            dest: /tmp/configure_containerd.sh
            mode: '0755'

        - name: Create or update configure_containerd.sh
          ansible.builtin.copy:
            content: |
              #!/bin/bash
              # Step 1: Switch to root user
              sudo su -

              # Step 2: Create directory /etc/containerd if not exists
              mkdir -p /etc/containerd

              # Step 3: Redirect containerd config to /etc/containerd/config.toml
              containerd config default > /etc/containerd/config.toml

              # Step 4: Modify SystemdCgroup option in config.toml
              sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

            dest: /tmp/configure_containerd.sh
            mode: '0755' # Set appropriate permissions 

        - name: Change permissions
          become: yes
          become_method: sudo
          shell: chmod +x /tmp/configure_containerd.sh

        - name: Execute Shell Script
          shell: /tmp/configure_containerd.sh
          async: 300 # Timeout in seconds
          poll: 0 # Poll every 0 seconds (don't wait for completion)
          ignore_errors: yes
          register: script_result

        - name: Wait for Script Completion
          async_status:
            jid: "{{ script_result.ansible_job_id }}"
          register: job_result
          until: job_result.finished
          retries: 1 # Retry up to 60 times (adjust as needed)
          delay: 10 # Delay 10 seconds between retries

        - name: Display Script Output
          debug:
            var: script_result

        - name: Fail Play if Script Failed
          fail:
            msg: "Script execution failed with exit code {{ script_result
